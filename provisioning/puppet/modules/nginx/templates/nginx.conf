user www-data;
worker_processes  4;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

# Number of file descriptors used for Nginx. This is set in the OS with 'ulimit -n 200000'
# or using /etc/security/limits.conf
worker_rlimit_nofile 4096;

events {
    worker_connections  1024;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;

    access_log  /var/log/nginx/access.log;

    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring data to and from the user space.
    # NOTE: turned off when we are inside VirtualBox as there this thing is broken.
    # See https://docs.vagrantup.com/v2/synced-folders/virtualbox.html

    <% if @disable_sendfile %>
        sendfile        off;
    <% else %>
        sendfile        on;
    <% end %>

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. This is useful for prepending headers before calling sendfile,
    # or for throughput optimization.
    tcp_nopush      on;

    # Don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
    # This is likely good for being behind ELB.
    tcp_nodelay on;

    # This is a complex setting. If we were serving clients directly, it adds to our load (RAM mostly)
    # to support keep-alive connections. The tradeoff is that it gets the responses to the user faster.
    # Some load balancers (for example nginx) do not support keep-alive's for its backends.
    # Amazon's ELB does with the caveat that *all* backends must have keep-alive on.
    # See http://engineering.chartbeat.com/2014/02/12/part-2-lessons-learned-tuning-tcp-and-nginx-in-ec2/
    keepalive_timeout 75; # In seconds.

    # Serve this many requests before closing the connection.
    keepalive_requests 4096;

    # Maximum size of the types hash tables. 2048 is the default.
    types_hash_max_size 2048;

    # Allow the server to close the connection after a client/load balancer stops responding. Frees up socket-associated memory.
    reset_timedout_connection on;

    # Send the client a "request timed out" if the body is not loaded by this time. Default 60.
    client_body_timeout 60; # In seconds;

    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
    send_timeout 60; # In seconds;

    # Caches information about open FDs, freqently accessed files.
    open_file_cache max=512 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Compression. Reduces the amount of data that needs to be transferred over the network
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_disable "msie6";

    # Reverse proxy settings. May, but should not, be overwritten in individual vhosts.
    proxy_redirect off;
    proxy_read_timeout 1800s;
    proxy_set_header        Host                    $http_host;
    proxy_set_header        Referer                 $http_referer;

    # If nginx is communicating directly with the user's browser, make sure to set these:
    proxy_set_header        X-Real-IP               $remote_addr;
    proxy_set_header        X-Forwarded-For         $remote_addr;
    proxy_set_header        X-Forwarded-Proto       $scheme;

    # If nginx is behind an AWS EC2 load balance, use these:
    #proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
    #proxy_set_header        X-Forwarded-Proto       $http_x_forwarded_proto;
    #real_ip_header X-Forwarded-For;
    #set_real_ip_from 0.0.0.0/0;

    # Hardening for prod use.
    server_tokens off;
    autoindex off;

    charset utf-8;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}


